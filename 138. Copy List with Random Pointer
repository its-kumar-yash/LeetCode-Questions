A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.

Construct a deep copy of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.

For example, if there are two nodes X and Y in the original list, where X.random --> Y, then for the corresponding two nodes x and y in the copied list, x.random --> y.

Return the head of the copied linked list.

The linked list is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:

val: an integer representing Node.val
random_index: the index of the node (range from 0 to n-1) that the random pointer points to, or null if it does not point to any node.
Your code will only be given the head of the original linked list.


**1. Using Unordered Map**
* Algorithm : 
		1. create a clone list using original list random pointer
		2. create mapping from original list clone list
		3. copy the random pointer of clone list using mapping
* Time Complexity : $$O(N)$$
* Space Complexity : $$O(N)$$
* Code : 
	```
	class Solution {
	public:
			//function to insert node at the tail
			void insertAtTail(Node* &head, Node* &tail, int data){
					Node* newNode = new Node(data);
					if(head == NULL){
							head = newNode;
							tail = newNode;
							return;
					}
					else{
							tail->next = newNode;
							tail = newNode;
							return;
					}
			}
			Node* copyRandomList(Node* head) {
					Node* temp = head;

					// step 1 - create a clone list using original list next ptr
					Node* cloneHead = NULL;
					Node* cloneTail = NULL;

					while(temp != NULL){
							insertAtTail(cloneHead, cloneTail, temp->val);
							temp = temp->next;
					}

					// step 2 - create a mapping from original to clone list

					unordered_map<Node*, Node*> oldToNewNode;

					Node* originalNode = head;
					Node* cloneNode = cloneHead;

					while(originalNode != NULL && cloneNode != NULL){
							oldToNewNode[originalNode] = cloneNode;
							originalNode = originalNode->next;
							cloneNode = cloneNode->next; 
					}

					// step 3 - copy random ptr using mapping

					originalNode = head;
					cloneNode = cloneHead;

					while(originalNode != NULL && cloneNode != NULL){

							cloneNode->random = oldToNewNode[originalNode->random];

							originalNode = originalNode->next;
							cloneNode = cloneNode->next; 
					}


					// step 4 - return clone list head

					return cloneHead;

			}
	};
	```

**2. Without Using Map**
* Algorithm : 
		1. create a clone list using original list random pointer
		2. clone node add in-between original node
		3. copy the random pointer 
		4. revert changes done in step 2
		5. return ans
* Time Complexity : $$O(N)$$
* Space Complexity : $$O(1)$$
* Code : 
	```
	class Solution {
	public:
			//function to insert node at the tail
			void insertAtTail(Node* &head, Node* &tail, int data){
					Node* newNode = new Node(data);
					if(head == NULL){
							head = newNode;
							tail = newNode;
							return; 
					}
					else{
							tail->next = newNode;
							tail = newNode;
							return;
					}
			}
			Node* copyRandomList(Node* head) {

					Node* cloneHead = NULL;
					Node* cloneTail = NULL;

					//step 1 - create a clone list using original list next pointer
					Node* temp = head;

					while(temp != NULL){
							insertAtTail(cloneHead, cloneTail, temp->val);
							temp = temp->next;
					}

					//step 2 - Clone Node add in-between Original Node

					Node* originalNode = head;
					Node* cloneNode = cloneHead;
					Node* next = NULL; // to store the address of next node

					while(originalNode != NULL && cloneNode != NULL){
							next = originalNode->next;
							originalNode->next = cloneNode;
							originalNode = next;

							next = cloneNode->next;
							cloneNode->next = originalNode;
							cloneNode = next;
					}

					// step 3 - copy random pointer

					temp = head;

					while(temp != NULL){
							// check
							if(temp->next != NULL){
									temp->next->random = temp->random ? temp->random->next : temp->random;
							}

							temp = temp->next->next;
					}

					// step 4 - revert changes done in step 2

					originalNode = head;
					cloneNode = cloneHead;

					while(originalNode != NULL && cloneNode != NULL){
							originalNode->next = cloneNode->next;
							originalNode = originalNode->next;

							//check
							if(originalNode != NULL){
									cloneNode->next = originalNode->next;
							}
							cloneNode = cloneNode->next;
					}

					// step 5 - return ans

					return cloneHead;
			}
	};
	```
