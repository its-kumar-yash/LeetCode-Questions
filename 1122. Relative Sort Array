Given two arrays arr1 and arr2, the elements of arr2 are distinct, and all elements in arr2 are also in arr1.

Sort the elements of arr1 such that the relative ordering of items in arr1 are the same as in arr2. Elements that do not appear in arr2 should be placed at the end of arr1 in ascending order.


**1. Sorting Approach**
1.1 loop over the length of arr2
1.2 nested loop over the length of arr1
1.3 if they have a common element swap it and increment s
1.4 at end sort the remaining array


    vector<int> relativeSortArray(vector<int>& arr1, vector<int>& arr2) {
        int s = 0;
        for(int i = 0; i < arr2.size(); i++){
            for(int j = 0; j < arr1.size(); j++){
                if(arr1[j] == arr2[i]){
                    swap(arr1[s], arr1[j]);
                    s++;
                }
            }
        }
        
        sort(arr1.begin() + s, arr1.end());
        
        return arr1;
    }


**2. Using Frequency Array**


    vector<int> relativeSortArray(vector<int>& arr1, vector<int>& arr2) {
        int n = 10e3+1;
        //Creating a frequency array
        vector<int> freq(n, 0);
        for(int i = 0; i < arr1.size(); i++){
            freq[arr1[i]]++;
        }
        
        vector<int> ans;
        //pushing element into ans array that from freq arr till it becomes 0
        for(int i = 0; i < arr2.size(); i++){
            while(freq[arr2[i]] != 0){
                ans.push_back(arr2[i]);
                freq[arr2[i]]--;
            }
        }
        
        //creating a temp array for remaining elements in arr1
        vector<int> temp;
        for(int i = 0; i < arr1.size(); i++){
            while(freq[arr1[i]] != 0){
                temp.push_back(arr1[i]);
                freq[arr1[i]]--;
            }
        }
        
        sort(temp.begin(), temp.end());
        
        //combining temp and ans
        for(int i = 0; i < temp.size(); i++){
            ans.push_back(temp[i]);
        }
        
        return ans;
    }
