Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle, and the last position is connected back to the first position to make a circle. It is also called "Ring Buffer".

One of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.

Implement the MyCircularQueue class:

MyCircularQueue(k) Initializes the object with the size of the queue to be k.
int Front() Gets the front item from the queue. If the queue is empty, return -1.
int Rear() Gets the last item from the queue. If the queue is empty, return -1.
boolean enQueue(int value) Inserts an element into the circular queue. Return true if the operation is successful.
boolean deQueue() Deletes an element from the circular queue. Return true if the operation is successful.
boolean isEmpty() Checks whether the circular queue is empty or not.
boolean isFull() Checks whether the circular queue is full or not.



**1. Implement Circular Queue Using Array**
* Algorithm :
		1. Queue Full Condition -> ( front == 0 && rear == size - 1 ) || ( front == rear + 1 )
		2. Queue Empty Condition -> ( front == -1 && rear == -1 )
		3. EnQueue -> Cases -> First Element , Cyclic Nature , Normal Flow
		5. DeQueue -> Cases -> Single Element , Cyclic Nature , Normal Flow 
* Time Complexity : $$O(1)$$ ( For All Operation )
* Code :
	```
	class MyCircularQueue {
	public:
			//data members
			int *arr;
			int front;
			int rear;
			int size;

			//behaviour
			MyCircularQueue(int k) {
					this->size = k;
					arr = new int[size];
					front = rear = -1;
			}

			bool enQueue(int value) {
					//check overflow condition
					if(isFull()){
							return false;
					}
					//first element to insert into queue
					else if(front == -1){
							front = rear = 0;
					}
					//circular nature
					else if(rear == size - 1 && front != 0){
							rear = 0;
					}
					//normal flow
					else{
							rear++;
					}
					//insert element at rear position
					arr[rear] = value;

					return true;
			}

			bool deQueue() {
					//check for underflow condition
					if(isEmpty()){
							return false;
					}
					//save the popped value and make that index -1
					int val = arr[front];
					arr[front] = -1;
					//single element present
					if(front == rear){
							front = rear = -1;
					}
					//circular flow
					else if(front == size - 1){
							front = 0;
					}
					//normal flow
					else{
							front++;
					}

					return true;
			}

			int Front() {
					//check for empty queue
					if(isEmpty()){
							return -1;
					}
					else{
							return arr[front];
					}
			}

			int Rear() {
					//check for empty queue
					if(isEmpty()){
							return -1;
					}
					else{
							return arr[rear];
					}
			}

			bool isEmpty() {
					//condition for queue empty
					if(front == -1 && rear == -1){
							return true;
					}
					else{
							return false;
					}
			}

			bool isFull() {
					//condition for queue full
					if( (front == 0 && rear == size - 1) || (front == rear + 1) ){
							return true;
					}
					else{
							return false;
					}
			}
	};
	```
