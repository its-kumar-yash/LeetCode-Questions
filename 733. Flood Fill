An image is represented by an m x n integer grid image where image[i][j] represents the pixel value of the image.

You are also given three integers sr, sc, and color. You should perform a flood fill on the image starting from the pixel image[sr][sc].

To perform a flood fill, consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color), and so on. Replace the color of all of the aforementioned pixels with color.

Return the modified image after performing the flood fill.


**Backtracking && DFS**

* Time Complexity - O( N * M )
*  No visited Needed
* The idea is simple. Simply perform a DFS on the source cell. Continue the DFS if:
1. Next cell is within bounds.
2. Next cell is the same color as source cell.
There is a tricky case where the new color is the same as the original color and if the DFS is done on it, there will be an infinite loop. If new color is same as original color, there is nothing to be done and we can simply return the image.

```
class Solution {
public:
    void solve(vector<vector<int>>& image, int sr, int sc, int color, int actualColor){
        //Base Condition
        if(sr < 0 || sc < 0 || sr == image.size() || sc == image[0].size() || image[sr][sc] != actualColor || image[sr][sc] == color){
            return;
        }

        if(image[sr][sc] == actualColor){
            //Updating element color
            image[sr][sc] = color;
            // possible moves
            solve(image, sr - 1, sc, color, actualColor); // top
            solve(image, sr, sc - 1, color, actualColor); // left
            solve(image, sr + 1, sc, color, actualColor); // down
            solve(image, sr, sc + 1, color, actualColor); // right
            return;
        }

    }
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int color) {
        //storing actual color of the element
        int actualColor = image[sr][sc];
        solve(image, sr, sc, color, actualColor);
        return image;
    }
};
```
