You are given the head of a singly linked-list. The list can be represented as:

L0 → L1 → … → Ln - 1 → Ln
Reorder the list to be on the following form:

L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …
You may not modify the values in the list's nodes. Only nodes themselves may be changed.


**1. Using Cycle Detection and LL Reversal**
* Algorithm : 
	1. 	find the middle of LL
	2. 	reverse the second half
	3. 	reaarange the two half
* Time Complexity : $$O(N)$$
* Space Complexity : $$O(1)$$
* Asked in : google, facebook
* Code :
	```
	class Solution {
	public: 
			ListNode* getMid(ListNode* head){
					ListNode* slow = head;
					ListNode* fast = head->next;

					while(fast != NULL && fast->next != NULL){
							slow = slow->next;
							fast = fast->next->next;
					}

					return slow;
			}
			ListNode* reverse(ListNode* head){
					ListNode* prev = NULL;
					ListNode* curr = head;
					ListNode* next = NULL;

					while( curr != NULL){
							next = curr->next;
							curr->next = prev;
							prev = curr;
							curr = next;
					}

					return prev;
			}
			void reorderList(ListNode* head) {
					//step 1 - find middle of LL
					ListNode* mid = getMid(head);

					//step 2 - reverse the second half
					ListNode* secondHead = reverse(mid);
					ListNode* firstHead = head;

					//step 3 - re-aarange the two halves
					ListNode* temp = NULL; // to store the address of next node
					while(firstHead != NULL && secondHead != NULL){
							temp = firstHead->next;
							firstHead->next = secondHead;
							firstHead = temp;

							temp = secondHead->next;
							secondHead->next = firstHead;
							secondHead = temp;
					}

			}
	};
	```
