Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

 



**Recursive Solutiton**
* Algorithm :
		1. Reverse first k nodes
		2. remaining nodes will be done by recursive call
		3. return prev 		
* Time Complexity : $$O(N)$$
* Space Complexity : $$O(N)$$
* Code :
	```
	class Solution {
	public:
			ListNode* reverseKGroup(ListNode* head, int k) {
					//base case
					if(head == NULL){
							return NULL;
					}
					//Edge Case
					ListNode* ptr = head;
					for(int i = 0; i < k; i++){
							if(ptr == NULL){
									return head;
							}
							ptr = ptr->next;
					}

					//step 1 - reverse the first k nodes
					ListNode* prev = NULL;
					ListNode* curr = head;
					ListNode* next = NULL;
					int count = 0;

					while(curr != NULL && count < k){
							next = curr->next;
							curr->next = prev;
							prev = curr;
							curr = next;
							count++;
					}

					//step 2 - recursion call for remaining nodes
					if(head != NULL){
							head->next = reverseKGroup(next, k);
					}

					//step 3 - return prev 
					return prev;
			}
	};
	```
