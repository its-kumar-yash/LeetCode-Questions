A conveyor belt has packages that must be shipped from one port to another within days days.

The ith package on the conveyor belt has a weight of weights[i]. Each day, we load the ship with packages on the conveyor belt (in the order given by weights). We may not load more weight than the maximum weight capacity of the ship.

Return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within days days.


class Solution {
public:
    bool isPossible(vector<int> weights, int days, int mid){
        
        int weightSum = 0; // weight capacity
        int n = weights.size();
        int daysCount = 1; // day count
        
        for(int i = 0; i < n; i++){
            if(weightSum + weights[i] <= mid){
                weightSum += weights[i];
            }
            else{
                daysCount ++;
                
                //Edge Case
                if( daysCount > days || weights[i] > mid){
                    return false;
                }
                
                weightSum = weights[i];
            }
        }
        
        return true;
    }
    
    
    int shipWithinDays(vector<int>& weights, int days) {
        // initializing search space
        // start = 0 and end = sum of all values of weights
        int s = 0, e = accumulate(weights.begin(),weights.end(), 0);
        
        int mid, ans;
        
        while(s <= e){
            mid = s + ( e - s )/2;
            //if we have a possible solution, then we'll check in the left side
            // as we need to find minimum possible solution
            if(isPossible(weights, days, mid)){
                ans = mid;
                e = mid - 1;
            }
            else{
                s = mid + 1;
            }
        }
        
        return ans;
    }
};
 
