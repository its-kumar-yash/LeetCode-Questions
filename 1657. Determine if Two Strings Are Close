Two strings are considered close if you can attain one from the other using the following operations:

Operation 1: Swap any two existing characters.
For example, abcde -> aecdb
Operation 2: Transform every occurrence of one existing character into another existing character, and do the same with the other character.
For example, aacabb -> bbcbaa (all a's turn into b's, and all b's turn into a's)
You can use the operations on either string as many times as necessary.

Given two strings, word1 and word2, return true if word1 and word2 are close, and false otherwise.


**String Good Question**
* Time Complexity - O( N )
* Space Complexity - O( N )

* Algorithm:
1.Find the frequency of every number
2.Sort them and compare their freq, if the same return true
3.Take care of the species of string (using sets), because we are only allow swap not create a new letter.

```
class Solution {
public:
    bool closeStrings(string word1, string word2) {
        int n = word1.length(), m = word2.length();
        //Condition 1 - if length of both string is different
        if( n != m ){
            return false;
        }
        vector freq1(26,0), freq2(26,0);
        set<char> w1, w2;

        //Now calculating frequency of each character
        for(char i : word1){
            w1.insert(i);
            freq1[i - 'a']++;
        }

        for(char i : word2){
            w2.insert(i);
            freq2[i - 'a']++;
        }

        //sorting frequency array
        sort(freq1.begin(), freq1.end());
        sort(freq2.begin(), freq2.end());

        return (w1 == w2) && (freq1 == freq2);
    }
};
```
