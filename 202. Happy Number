Write an algorithm to determine if a number n is happy.

A happy number is a number defined by the following process:

Starting with any positive integer, replace the number by the sum of the squares of its digits.
Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
Those numbers for which this process ends in 1 are happy.
Return true if n is a happy number, and false if not.

 



**Using Maths and Two Pointer**
* **Important Concept -** [Repeated sum of square of digits always arrives at 1 or 89](https://math.stackexchange.com/questions/1933385/repeated-sum-of-square-of-digits-always-arrives-at-1-or-89)
* Time Complexity - O( N )
```
class Solution {
public:
    bool isHappy(int n) {
        int temp = 0;
        
        // this will give the sum of digits of n
        while( n!=0){
            int rem = n%10;
            temp += pow(rem,2);
            n/=10;
        }
        
        n = temp;
        
        if(n == 89){
            return false;
        }
        else if( n == 1){
            return true;
        }
        
        return isHappy(n); 
    }
};
```
