You are given an array of characters letters that is sorted in non-decreasing order, and a character target. There are at least two different characters in letters.

Return the smallest character in letters that is lexicographically greater than target. If such a character does not exist, return the first character in letters.


**Brute Force**
* Time Complexity - O( LogN )
```
class Solution {
public:
    char nextGreatestLetter(vector<char>& letters, char target) {
        int s = 0, n = letters.size(), mid, e = n - 1; 
        char ans, res = letters[0];
        
				//Edge Case
        if(letters[n-1] <= target){
            return res;
        }
            
        while( s <= e ){
				
            mid = s + ( e - s)/2;
            if(letters[mid] <= target){
                s = mid + 1;
            }
            else{
                ans = letters[mid];
                e = mid - 1;
            }
        }
        
        return ans;
    }
};
```

**Optimized Approach**
* Time Complexity - O( LogN )
```
class Solution {
public:
    char nextGreatestLetter(vector<char>& letters, char target) {
        int n = letters.size();
        int s = 0, e = n - 1, mid;
        
        while( s <= e){
            mid = s + ( e - s )/2;
    
            if( letters[mid] > target){
                e = mid - 1;
            }
            else{
                s = mid + 1;
            }
        }
        
        return letters[s % n];
    }
};
```
