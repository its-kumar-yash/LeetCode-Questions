Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of unique elements, return the minimum element of this array.

You must write an algorithm that runs in O(log n) time.





**1. Brute Force**
* By checking if array is sorted or not
* Time Complexity - O( NLogN )
```
class Solution {
public:
    bool isSorted(vector<int> a){
        for (int i = 0; i < a.size() - 1; i++) {
            if (a[i] > a[i + 1]) {
                return false; // It is proven that the array is not sorted.
            }
        }

        return true;
    }
    int findMin(vector<int>& nums) {
        int n = nums.size(), s = 0, e = n - 1;
        int mid;
        
        if(isSorted(nums)){
            return nums[0];
        }
        
        while( s < e ){
            mid = s + ( e - s )/2;
            if(nums[mid] >= nums[0]){
                s = mid + 1;
            }
            else{
                e = mid;
            }
        } 

        return nums[s];
    }
};
```

**2. Using Binary Search**
* Time Complexity - O( LogN )
```
class Solution {
public:
    int findMin(vector<int>& nums) {
        int n = nums.size(), s = 0, e = n - 1;
        int mid;
        
        if(nums[s] < nums[e]){
            return nums[s];
        }
        
        while( s < e ){
            mid = s + ( e - s )/2;
            
            if(nums[mid] >= nums[0]){
                s = mid + 1;
            }
            else{
                e = mid;
            }
        } 

        return nums[s];
    }
};
```
