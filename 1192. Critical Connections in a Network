### Concept : Bridge in Graph (Tarjan's Algo)

#### Using DFS + Tarjan's Algo

Approach: 

The algorithm steps are as follows:

1. First, we need to create the adjacency list for the given graph from the edge information(If not already given). And we will declare a variable timer(either globally or we can carry it while calling DFS), that will keep track of the time of insertion for each node.
2. Then we will start DFS from node 0(assuming the graph contains a single component otherwise, we will call DFS for every component) with parent -1.
3. Inside DFS, we will first mark the node visited and then store the time of insertion and the lowest time of insertion properly. The timer may be initialized to 0 or 1.
Now, itâ€™s time to visit the adjacent nodes. 
  3.1. If the adjacent node is the parent itself, we will just continue to the next node.
  3.2 If the adjacent node is not visited, we will call DFS for the adjacent node with the current node as the parent.
      After the DFS gets completed, we will compare the lowest time of insertion of the current node and the adjacent node and take the minimum one.
      Now, we will check if the lowest time of insertion of the adjacent node is greater than the time of insertion of the current node.
      If it is, then we will store the adjacent node and the current node in our answer array as they are representing the bridge.
  3.3 If the adjacent node is already visited, we will just compare the lowest time of insertion of the current node and the adjacent node and take the minimum one.
4. Finally, our answer array will store all the bridges.

* Time Complexity : $$ O(V+2E)$$ , where $$V$$ = no. of vertices, $$E$$ = no. of edges. It is because the algorithm is just a simple DFS traversal.

* Space Complexity : $$O(V+2E) + O(3V)$$, where V = no. of vertices, E = no. of edges. $$O(V+2E)$$ to store the graph in an adjacency list and $$O(3V)$$ for the three arrays i.e. tin, low, and vis, each of size $$V$$.

```
class Solution {
public:
    //Calculating bridges in the graph
    //declare a variable timer
    int timer = 1; // to keep track of the time of insertion for each node

    void dfs(int node, int parent, vector<int> &vis, unordered_map<int, vector<int>> &adj, vector<int> &tin, vector<int> &low, vector<vector<int>> &bridges){
        vis[node] = 1; //mark the node visited 
        //store the time of insertion and the lowest time of insertion properly
        tin[node] = low[node] = timer;
        timer++;

        for(auto &child : adj[node]){
            //adjacent node is the parent itself, just continue to the next node
            if(child == parent){
                continue;
            } 
            //If the adjacent node is not visited, call DFS for the adjacent node with the current node as the parent
            if(!vis[child]){
                dfs(child, node, vis, adj, tin, low, bridges);
                //after the dfs gets completed
                //the lowest time of insertion of the current node and the adjacent node and take the minimum
                low[node] = min(low[node], low[child]);
                //node ---- child
                //check if the lowest time of insertion of the adjacent node is greater than the time of insertion of the current node
                if(low[child] > tin[node]){
                    bridges.push_back({child, node});
                }
            }
            //if the adjacent node is already visited
            else{
                low[node] = min(low[node], low[child]);
            }
        }
    }

    vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) {
        //Step 1 - create adjacency list
        unordered_map<int, vector<int>> adj;

        for(auto &vec : connections){
            int u = vec[0];
            int v = vec[1];

            adj[u].push_back(v);
            adj[v].push_back(u);
        }

        vector<int> vis(n, 0);
        vector<int> tin(n, 0); //Time of insertion
        vector<int> low(n, 0); //lowest time of insertion

        vector<vector<int>> bridges;

        //step 2 - DFS from node 0(assuming the graph contains a single component otherwise, we will call DFS for every component) with parent -1
        dfs(0, -1, vis, adj, tin, low, bridges);

        return bridges;
    }
};
```
