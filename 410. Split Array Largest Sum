Given an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized.

Return the minimized largest sum of the split.

A subarray is a contiguous part of the array.

 
 
 class Solution {
public:
    int splitArray(vector<int>& nums, int k) {
        int start = 0, end = 0;
        // Range Calculation
        
        for(int i = 0; i < nums.size(); i++){
            start = max(start, nums[i]);
            end += nums[i];
        }

        //binary Search
        while( start < end){
            int mid = start + (end - start)/2;
            // calculate how many pieces you can divide this in with this max sum
            int sum = 0, pieces = 1;
            for(int num : nums){
                if(sum + num > mid){
                    // you cannot add this in this subarray, make new one
                    // say you add this num in new subarray, then sum = num
                    sum = num;
                    pieces++;
                }
                else{
                    sum = sum + num;
                }
            }

            if(pieces > k){
                start = mid + 1;
            }
            else{
                end = mid;
            }
        }
    

        return end;
    }
};
