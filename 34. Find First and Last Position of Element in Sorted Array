Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.


**Using Binary Search**
* Time Complexity - O( LogN )
```
class Solution {
public:
    // function to find first occurrence of element
    int firstPosition(vector<int> nums, int target){
        int ans = -1, s = 0, e = nums.size() - 1, mid;
        
        while( s <= e ){
            mid = s + ( e - s )/2;
            if(nums[mid] == target){
                ans = mid;
                e = mid - 1;
            }
            else if(nums[mid] < target){
                s = mid + 1;
            }
            else{
                e = mid - 1;
            }
        }
        
        return ans;
    }
    
    // function to find last occurrence of element
    int lastPosition(vector<int> nums, int target){
        int ans = -1, s = 0, e = nums.size() - 1, mid;
        
        while( s <= e ){
            mid = s + ( e - s )/2;
            if(nums[mid] == target){
                ans = mid;
                s = mid + 1;
            }
            else if(nums[mid] < target){
                s = mid + 1;
            }
            else{
                e = mid - 1;
            }
        }
        
        return ans;
    }
    
    vector<int> searchRange(vector<int>& nums, int target) {
        
        return {firstPosition(nums, target), lastPosition(nums, target)};
    }
};
```
