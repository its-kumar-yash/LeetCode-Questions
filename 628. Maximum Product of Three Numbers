Given an integer array nums, find three numbers whose product is maximum and return the maximum product.

1. **Brute Force Approach**
		1.1 Check each triplet and find the maximum product
		1.2 Time Complexity - O(n^3)
```
class Solution {
public:
    int maximumProduct(vector<int>& nums) {
        int n = nums.size();
        int maxi = INT_MIN;
        for(int i = 0; i < n; i++){
            for(int j = i+1; j < n; j++){
                for(int k = j+1; k < n; k++){
                    maxi = max(maxi, nums[i]*nums[j]*nums[k]);
                }
            }
        }
        return maxi;
    }
};
```
2. **Sorting**
		2.1 Sort the Array
    2.2 Max Product Possibilities :
				 2.1.1 Last Three Elements
				 2.1.2 First Two and Last 
		2.3 Time Complexity : O( N*logN )
```
class Solution {
public:
    int maximumProduct(vector<int>& nums) {
        int n = nums.size()- 1;
        int maxi = INT_MIN;
        sort(nums.begin(), nums.end());
        return (maxi = max(nums[n]*nums[n-1]*nums[n-2] , nums[0]*nums[1]*nums[n]));
    }
};
```

3. **Finding Maximum and Minimum**
   3.1 O(N)
```
class Solution {
public:
    int maximumProduct(vector<int>& nums) {
        int maxi;
        int max1 = INT_MIN, max2 = INT_MIN, max3 = INT_MIN;
        int min1 = INT_MAX, min2 = INT_MAX;
        for(int i = 0; i < nums.size(); i++){
            // for finding three maximum number
            if(nums[i] > max1){
                max3 = max2;
                max2 = max1;
                max1 = nums[i];
            }
            else if(nums[i] > max2){
                max3 = max2;
                max2 = nums[i];
            }
            else if(nums[i] > max3){
                max3 = nums[i];
            }
            
            //for finding two minimum number
            
            if(nums[i] < min1){
                min2 = min1;
                min1 = nums[i];
            }
            else if(nums[i] < min2){
                min2 = nums[i];
            }
        }
        
        return maxi = max(max1*max2*max3, max1*min1*min2);
    }
};
```
