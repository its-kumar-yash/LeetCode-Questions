Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

**1. Using Sorting But can also be done using Stack**
* Time Complexity - $$O(N*LogN)$$
* Space Complexity - $$O(1)$$
```
class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        //sort the intervals according to start of interval
        sort(intervals.begin(), intervals.end());

        vector<vector<int>> merged;

        for(auto interval : intervals){
            // if the list of merged intervals is empty or if the current
            // interval does not overlap with the previous, simply append it.
            //first element 
            if(merged.empty()){
                merged.push_back(interval);
            }

            else{
                if(merged.back()[1] < interval[0]){
                    merged.push_back(interval);
                }
                // otherwise, there is overlap, so we merge the current and previous
                // intervals.
                else{
                    merged.back()[1] = max(merged.back()[1], interval[1]);
                }
            }
        }

        return merged;
    }
};
```
