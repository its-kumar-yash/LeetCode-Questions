Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.

**1. Using Stack ( Next Smallest Element on the Left and Right )**
* Time Complexity - $$O(N)$$
* Space Complexity - $$O(N)$$
* Algorithm :
			1. Find right boundary and left boundary
			2.  width = RB - LB - 1
			3.  area = width * length 
```
class Solution {
public:
    //function to find next smallest element to the right
    vector<int> rightBoundary(vector<int> heights, int n){
        vector<int> ans(n);
        stack<int> st;

        //push last index into stack
        ans[n - 1] = n;
        st.push(n - 1);


        for(int i = n - 2; i >= 0; i--){
    
            while( !st.empty() && heights[i] <= heights[st.top()]){
                st.pop();
            }

            if(st.empty()){
                ans[i] = n;
            }
            else{
                ans[i] = st.top();
            }

            st.push(i);
        }

        return ans;
    }
    //function to find next smallest element to the left
    vector<int> leftBoundary(vector<int> heights, int n){
        vector<int> ans(n);
        stack<int> st;

        ans[0] = -1;
        st.push(0);

        for(int i = 1; i < n; i++){
            while( !st.empty() && heights[i] <= heights[st.top()]){
                st.pop();
            }

            if(st.empty()){
                ans[i] = -1;
            }
            else{
                ans[i] = st.top();
            }

            st.push(i);
        }

        return ans;
    }
    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size();

        vector<int> rb(n); // right boundary - nse index to the right
        rb = rightBoundary(heights, n);

        vector<int> lb(n); // left boundary - nse index to the left
        lb = leftBoundary(heights, n);

        int maxArea = INT_MIN;

        for(int i = 0; i < n; i++){
            int width = rb[i] - lb[i] - 1; //expression for width

            int area = width * heights[i]; // area = l * b

            maxArea = max(maxArea, area);
        }

        return maxArea;
    }
};
```
