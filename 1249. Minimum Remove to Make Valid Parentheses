Given a string s of '(' , ')' and lowercase English characters.

Your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string.

Formally, a parentheses string is valid if and only if:

It is the empty string, contains only lowercase characters, or
It can be written as AB (A concatenated with B), where A and B are valid strings, or
It can be written as (A), where A is a valid string.



**1. Iterative Solution - Two Pass - Without Stack**
* Basic Idea - no. of opening brackets >= no. of closing bracket( in a running iteration)
* Time Complexity - $$O(N)$$
* Space Complexity - $$O(1)$$
```
class Solution {
public:
    string minRemoveToMakeValid(string s) {
        //basic idea in a running flow of string
        //no. of opening brackets >= no. of closing bracket
        int  n = s.length();
        // for open brackets
        int open = 0;

        for(int i = 0; i < n; i++){
            //if open bracket
            if(s[i] == '('){
                open++;
            }
            else if(s[i] == ')'){
                if(open == 0){
                    s[i] = '*';
                }
                else{
                    open--;
                }
            }
        }

        //for closing bracket
        int close = 0;

        for(int i = n - 1; i >= 0; i--){
            if(s[i] ==')'){
                close++;
            }
            else if(s[i] == '('){
                if(close == 0){
                    s[i] = '*';
                }
                else{
                    close--;
                }
            }
        }

        //removing * from original string
        string ans = "";

        for(int i = 0; i < n; i++){
            if(s[i] != '*'){
                ans += s[i];
            }
        }

        return ans;
    }
};
```

**2. Using Stack **
* Time Complexity - $$O(N)$$
* Space Complexity - $$O(N)$$
```
class Solution {
public:
    string minRemoveToMakeValid(string s) {
        int n = s.length();
        stack<int> st;

        for(int i = 0; i < n; i++){
            //if opening bracket , push index into stack
            if(s[i] == '('){
                st.push(i);
            }
            // if closing bracket,
            //check if stack is empty or not, if yes then change s[i] to '*'
            //otherwise pop out stack top
            else if( s[i] == ')'){
                if(st.empty()){
                    s[i] = '*';
                }
                else{
                    st.pop();
                }
            }
        }
        //if stack contains remaining ( -> change them to *
        while(!st.empty()){
            int top = st.top();
            s[top] = '*';
            st.pop();
        }

        string ans = "";
        for(int i = 0; i < n; i++){
            if(s[i] != '*'){
                ans += s[i];
            } 
        }


        return ans;
    }
};
```
