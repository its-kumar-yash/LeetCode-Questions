An array arr a mountain if the following properties hold:

arr.length >= 3
There exists some i with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
Given a mountain array arr, return the index i such that arr[0] < arr[1] < ... < arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1].

You must solve it in O(log(arr.length)) time complexity.


**Using Binary Search**
* Time Complexity - O( LogN )
* In each iteration, we check the mid: if it's smaller than the next element, it's on the left side of the mountain and we have to continue searching in the right side of mid. So low = mid+1. Otherwise, high = mid-1.
```
class Solution {
public:
    int peakIndexInMountainArray(vector<int>& arr) {
        int s = 0;
        int e = arr.size() - 1;
        int mid;
        
        while( s < e){
            
            mid = s + (e - s)/2;
            
            if(arr[mid] < arr[mid + 1])
                s = mid + 1;
            
            else
                e = mid;
        }
        
        return s;
    }
};
```
