Given an m x n matrix, return all elements of the matrix in spiral order.

## Spiral Matrix - 100%

* Time Complexity - $$O(R*C)$$
* Space Complexity - $$O(N)$$

```
class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        
        vector<int> ans;

        int row = matrix.size();
        int col = matrix[0].size();

        int top = 0;
        int bottom = row - 1;
        int left = 0;
        int right = col - 1;

        while(left <= right && top <= bottom){
            //left -> right
            for(int i = left; i <= right; i++){
                ans.push_back(matrix[top][i]);
            }
            top++;

            //top -> bottom
            for(int i = top; i <= bottom; i++){
                ans.push_back(matrix[i][right]);
            }
            right--;

            //edge condition
            if(top <= bottom){
                //right -> left
                for(int i = right; i >= left; i--){
                    ans.push_back(matrix[bottom][i]);
                }
                bottom--;
            }

            //edge condition
            if(left <= right){
                //bottom to top
                for(int i = bottom; i >= top; i--){
                    ans.push_back(matrix[i][left]);
                }
                left++;
            }

        }

        return ans;
    }
};
```
