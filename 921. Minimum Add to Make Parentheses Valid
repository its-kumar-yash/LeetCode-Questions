A parentheses string is valid if and only if:

It is the empty string,
It can be written as AB (A concatenated with B), where A and B are valid strings, or
It can be written as (A), where A is a valid string.
You are given a parentheses string s. In one move, you can insert a parenthesis at any position of the string.

For example, if s = "()))", you can insert an opening parenthesis to be "(()))" or a closing parenthesis to be "())))".
Return the minimum number of moves required to make s valid.


###### [Same Approach Used Here](https://leetcode.com/problems/minimum-remove-to-make-valid-parentheses/)

##### Algorithm :
1. Find all the invalid brackets
2. convert them to ' * '
3. count them

**Brute Force - Using Stack - 100%**
* Time Complexity - $$O(N)$$
* Space Complexity - $$O(N)$$
```
class Solution {
public:
    int minAddToMakeValid(string s) {
        int n = s.length();
        //create a stack 
        stack<int> st;

        //iterate through the string 
        for(int i = 0; i < n; i++){
            //if you encountered open bracket, simply push it's Index into stack 
            if(s[i] == '('){
                st.push(i);
            }
            //else if you encountered close bracket, 
            //check if stack is empty or not
            else{
                if(st.empty()){
                    s[i] = '*';
                }
                else{
                    st.pop();
                }
            }
        }

        //at end change all invalid brackets in '*'
        while(!st.empty()){
            int top = st.top();
            s[top] = '*';
            st.pop();
        }

        //cout<<s<<endl;

        //and finally count them and return the count 
        int cnt = 0;
        for(int i = 0; i < n; i++){
            if(s[i] == '*'){
                cnt++; 
            }
        }

        return cnt++;
    }
};
```

**Optimized Approach - 100%**
* Time Complexity - $$O(N)$$
* Space Complexity - $$O(N)$$
```
class Solution {
public:
    int minAddToMakeValid(string s) {
        int n = s.length(), cnt = 0;
        stack<int> st;

        for(int i = 0; i < n; i++){
            if(s[i] == '('){
                st.push(i);
            }
            else{
                if(st.empty()){
                    cnt++;
                }
                else{
                    st.pop();
                }
            }
        }

        while(!st.empty()){
            cnt++;
            st.pop();
        }

        return cnt;
    }
};
```
