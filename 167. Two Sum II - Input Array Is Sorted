Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.

Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.

The tests are generated such that there is exactly one solution. You may not use the same element twice.

Your solution must use only constant extra space.

1st -
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        // initializing start and end pointer
        int s = 0;
        int e = nums.size() - 1;
        
        while( s < e){
            int sum = nums[s] + nums[e];
            if(sum == target){
                return {s+1, e+1};
            }
            else if(sum < target){
                s++;
            }
            else{
                e--;
            }
        }
        
        // if target sum won't exist
        return {-1,-1};
    }
};

2nd - 
class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        int s, e, mid, n = numbers.size();
        
        for(int i = 0; i < numbers.size() - 1; i++){
            
            s = i + 1, e = n - 1; 
            
            while( s <= e){
                mid = s + ( e - s )/2;
                
                if(numbers[i] + numbers[mid] == target){
                    return {i+1, mid+1};
                }
                
                else if(numbers[i] + numbers[mid] > target){
                    e = mid - 1;
                }
                
                else{
                    s = mid + 1;
                }
            
            }
        }
        
        return {-1,-1};
    }
};




