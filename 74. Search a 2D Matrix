Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.



**Using Binary Search**
* Time Complexity - O( N * LogM )
* Similar Question -[Search a 2D Matix - II](https://leetcode.com/problems/search-a-2d-matrix-ii/)

```
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int n = matrix.size(), m = matrix[0].size();
        int s, e, mid;
        
        //Edge Cases
        if( n == 0 || m == 0){
            return false;
        }
        
        if(target < matrix[0][0] || target > matrix[n - 1][m - 1]){
            return false;
        }
        
        
        for(int i = 0; i < n; i++){
            // initializing start with first row & end with last column
            s = 0, e = m - 1;
            
            while(s <= e){
                
                mid = s + (e - s)/2;
                
                if(matrix[i][mid] == target){
                    return true;
                }
                // mid element is greater than target, then move end pointer
                else if(matrix[i][mid] > target){
                    e = mid - 1;
                }
                // mid element is lesser than target, then move start pointer
                else{
                    s = mid + 1;
                }
            }
        }
        
        return false;
    }
};
```
