Given an array arr of integers, check if there exist two indices i and j such that :

  -i != j 
  -0 <= i, j < arr.length
  -arr[i] == 2 * arr[j]
  
  
  
  **Brute Force**
* Time Complexity - O( N<sup>2</sup> )
```
class Solution {
public:
    bool checkIfExist(vector<int>& arr) {
        int n = arr.size();
        for(int i = 0; i < n; i++){
            for(int j = i+1; j < n; j++){
                if(2*arr[i] == arr[j] || (arr[i] == 2*arr[j])){
                    return true;
                }
            }
        }
        
        return false;
    }
};
```

**Using Binary Search**
* Time Complexity - O( N*LogN )

```
class Solution {
public:
    // simple binary search function
    bool binarySearch(vector<int>& nums, int s, int e, int target){
        int mid;
        while(s <= e){
            
            mid = s + ( e - s )/2;
            
            if(nums[mid] == target){
                return true;
            }
            
            else if(nums[mid] > target){
                e = mid - 1;
            }
            
            else{
                s = mid + 1 ;
            }
        }
        
        
        return false;
    }
    
    bool checkIfExist(vector<int>& arr) {
        
        sort(arr.begin(), arr.end());
        
        for (int i = 0; i < arr.size(); i++) {
            // if number is divisible by 2 and less than 0 
            if ((arr[i] % 2 == 0) && arr[i] < 0) {
                if (binarySearch(arr, i + 1, arr.size() - 1, arr[i] / 2))
                    return true; 
            }
            
            else {
                if (binarySearch(arr, i + 1, arr.size() - 1, 2 * arr[i]))
                    return true;
            }
        }
        
        return false;
    }
};
```

  
  
